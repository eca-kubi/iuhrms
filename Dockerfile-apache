# Description: Dockerfile for the Apache web server for production

# Start with the php:8.1-apache image.
FROM php:8.1-apache


# Set the working directory
WORKDIR /var/www/html

# Set the user and group
RUN chown -R www-data:www-data /var/www/html

# Install necessary dependencies and utilities
RUN apt-get update && \
    apt-get install -y \
    libicu-dev \
    libmcrypt-dev \
    libzip-dev \
    libpq-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    libxml2-dev \
    libonig-dev \
    zlib1g-dev \
    iputils-ping \
    zip \
    unzip \
    curl \
    git \
    iproute2 \
    net-tools && \
    rm -rf /var/lib/apt/lists/*

# Enable necessary Apache modules
RUN a2enmod \
    rewrite \
    headers \
    expires \
    deflate \
    ssl \
    proxy \
    proxy_http \
    proxy_fcgi \
    include

# Configure PHP and Apache
RUN docker-php-ext-configure \
    gd --with-freetype --with-jpeg

RUN docker-php-ext-install \
    intl \
    mbstring \
    pdo_mysql \
    gd \
    zip \
    soap \
    bcmath \
    opcache \
    mysqli

# Install pcntl
RUN docker-php-ext-install pcntl

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Copy the composer.json and composer.lock files to the container
COPY composer.json composer.lock ./

# Run composer install to install production dependencies
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Create a logs directory and set permissions
RUN mkdir -p /var/www/html/logs && chown -R www-data:www-data /var/www/html/logs

# Copy the current directory contents into the container at /var/www/html
COPY . .

# Copy the production .htaccess file to the container
COPY .htaccess.prod .htaccess

# Create the cache directory and set permissions
RUN mkdir -p /var/www/html/app/cache && chown -R www-data:www-data /var/www/html/app/cache

# Create the logs directory and set permissions
RUN mkdir -p /var/www/html/app/logs && chown -R www-data:www-data /var/www/html/app/logs

# Expose port 80
EXPOSE 80

# Run Apache when the container launches
CMD ["apachectl", "-D", "FOREGROUND"]